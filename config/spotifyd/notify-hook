#!/usr/bin/env ruby
# frozen_string_literal: true

# notify-hook: do a desktop notification for spotifyd

require "digest"
require "etc"
require "net/http"
require "pathname"
require "tempfile"
require "uri"

exit unless %w[start change].include? ENV["PLAYER_EVENT"]

SPOTIFY_ICON_CACHE = Pathname.new "/tmp/spotify-icons-#{Etc.getlogin}"
SPOTIFY_ICON_CACHE.mkdir unless SPOTIFY_ICON_CACHE.exist?

module StringExt
  def squish!
    gsub!(/\A[[:space:]]+/, "")
    gsub!(/[[:space:]]+\z/, "")
    gsub!(/[[:space:]]+/, " ")
    self
  end
end

String.include StringExt

def get_or_cache(icon_url)
  if icon_url.nil?
    notify body: "no icon URL; exiting"
    exit
  end

  icon_url = URI(icon_url)

  if icon_url.scheme != "https"
    notify body: "insecure icon URL; exiting"
    exit
  end

  hashed = Digest::SHA2.hexdigest icon_url
  cache_dest = SPOTIFY_ICON_CACHE / hashed

  unless cache_dest.file?
    cache_dest.open("w+") do |f|
      resp = Net::HTTP.get(icon_url)
      f.write resp
    end
  end

  cache_dest
end

def notify(body:, summary: "spotifyd", icon: nil)
  cmd = %w[notify-send]

  cmd << "--icon=#{icon}" unless icon.nil?
  cmd << summary
  cmd << body

  system(*cmd)
end

metadata = begin
  lines = `playerctl --player=spotifyd metadata`.split("\n").map(&:squish!).map do |l|
    l.split(/[[:space:]]/, 3)
  end

  if lines.empty?
    notify body: "no metadata (playerctl failure?); exiting"
    exit
  end

  lines.map { |l| [l[1], l[2]] }.to_h
end

notify summary: metadata["xesam:artist"],
       body: "#{metadata["xesam:album"]} - #{metadata["xesam:title"]}",
       icon: get_or_cache(metadata["mpris:artUrl"])
