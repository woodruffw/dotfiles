#!/usr/bin/env python3

# list-unsubscribe: attempt to automatically perform an email unsubscription
# action, whether by mailto: or by a web URL.

from email.parser import HeaderParser
import re
import subprocess
import sys
from urllib.parse import urlparse, parse_qs
import webbrowser

_MUA = "neomutt"  # can be mutt or another MUA that looks vaguely like mutt
_FUZZY_FINDER = "selecta"  # can be fzf or another fuzzy finder
_LIST_UNSUBSCRIBE = "list-unsubscribe"


def barf(msg):
    print(f"list-unsubscribe: {msg}", file=sys.stderr)
    sys.exit(1)


def fuzzy(options):
    process = subprocess.run(
        _FUZZY_FINDER, input="\n".join(options), text=True, capture_output=True
    )

    if process.returncode != 0:
        barf(f"{_FUZZY_FINDER} exited with non-zero status: {process.returncode}")

    choice = process.stdout.rstrip("\n")
    if choice not in options:
        barf(f"user requested {choice}, which is invalid")

    return choice


def mail(mailto):
    parsed = urlparse(mailto)
    query = parse_qs(parsed.query)

    # Ugliness: there can be multiple To: recipients in the mailto:, both
    # in the URL path (which can also be empty) and in the query string.
    tos = parsed.path.split(",") + query.get("to", [])
    tos = list(set(tos))

    # Similarly, the subject might be empty. We insert "unsubscribe" as a
    # reasonable default if it is.
    subject = " ".join(query.get("subject", ["unsubscribe"]))

    # Similarly for the body, except that our default is empty.
    body = " ".join(query.get("body", [""]))

    # Throw it into our MUA.
    process = subprocess.run([_MUA, "-s", subject, "--", *tos], input=body, text=True)

    if process.returncode != 0:
        barf(f"{_MUA} exited with non-zero status: {process.returncode}")


headers = HeaderParser().parse(sys.stdin)

if _LIST_UNSUBSCRIBE not in headers:
    barf("no list-unsubscribe header to parse")


list_unsubscribe = headers[_LIST_UNSUBSCRIBE]

# RFC2369: The list-unsubscribe header contains a comma separated list
# of <links>, each of which might be a mailto: or web URL.
# We extract them all and ask the user to make a selection using a
# fuzzy-finder (or just pick the first, if there's only one).
links = re.findall(r"<([^<>]+)>", list_unsubscribe)

if len(links) == 0:
    barf(f"header found, but no links? debug: {list_unsubscribe}")
elif len(links) == 1:
    choice = links[0]
else:
    choice = fuzzy(links)

# Finally, be intelligent: if it's a mailto:, then do our damnedest to parse
# it and compose an automatic email.
# If it's a web URL, throw it through webbrowser.
if choice.startswith("mailto:"):
    mail(choice)
else:
    webbrowser.open(choice)
