#!/usr/bin/env bash

# dotfiles: fetch configuration files and scripts
# usage: dotfiles

function installed {
	local cmd=$(command -v "${1}")

	[[ -n "${cmd}" ]] && [[ -f "${cmd}" ]]
	return ${?}
}

function fetch_files() {
	local system=$(uname)
	local host=$(hostname)

	if ! installed git ; then
		>&2 echo "Fatal: git required to fetch configs."
		exit 1
	fi

	pushd . > /dev/null

	# make sure the repo isn't clobbered
	if [[ -d ~/.dotfiles/.git ]] ; then
		cd ~/.dotfiles
		git fetch origin --quiet > /dev/null
		git merge origin/master > /dev/null
	else
		rm -rf ~/.dotfiles
		git clone https://github.com/woodruffw/dotfiles ~/.dotfiles > /dev/null
	fi

	popd > /dev/null

	mkdir -p ~/scripts

	printf "Reloading bashrc and profile..."
	cp ~/.dotfiles/bashrc ~/.bashrc
	cp ~/.dotfiles/bash_profile ~/.bash_profile
	printf "${COLOR_GRN}done${COLOR_NRM}.\n"

	# we know git is installed
	printf "Reloading git-aliases, gitignore, and gitconfig..."
	cp ~/.dotfiles/git-aliases ~/.git-aliases
	cp ~/.dotfiles/gitignore ~/.gitignore
	cp ~/.dotfiles/gitconfig ~/.gitconfig
	printf "${COLOR_GRN}done${COLOR_NRM}.\n"

	printf "Checking for vim..."
	if installed vim ; then
		printf "found. Reloading vimrc, scripts, and plugins... "
		cp ~/.dotfiles/vimrc ~/.vimrc
		mkdir -p ~/.vim/
		cp -R ~/.dotfiles/vim/* ~/.vim
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for curl..."
	if installed curl ; then
		printf "found. Reloading curlrc..."
		cp ~/.dotfiles/curlrc ~/.curlrc
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for rtorrent..."
	if installed rtorrent ; then
		printf "found. Reloading rtorrent.rc and magnet scripts..."
		if [[ ~/.dotfiles/rtorrent-${host}.rc ]]; then
			cp ~/.dotfiles/rtorrent-${host}.rc ~/.rtorrent.rc
		else
			printf "skipping rtorrent.rc.\n"
		fi

		cp ~/.dotfiles/scripts/magnet-to-torrent.pl ~/scripts/magnet-to-torrent.pl
		cp ~/.dotfiles/scripts/magnet.sh ~/scripts/magnet.sh
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for tmux..."
	if installed tmux ; then
		printf "found. Reloading tmux.conf and session files..."
		cp ~/.dotfiles/tmux.conf ~/.tmux.conf
		mkdir -p ~/.tmux
		cp ~/.dotfiles/tmux/* ~/.tmux/
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for xbindkeys..."
	if installed xbindkeys ; then
		printf "found. Reloading xbindkeysrc..."
		if [[ -f ~/.dotfiles/xbindkeysrc-${host} ]] ; then
			cp ~/.dotfiles/xbindkeysrc-${host} ~/.xbindkeysrc
			printf "${COLOR_GRN}done${COLOR_NRM}.\n"
		else
			printf "none required.\n"
		fi
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for thunar..."
	if installed thunar ; then
		printf "found. Reloading uca.xml..."
		mkdir -p ~/.config/Thunar
		cp ~/.dotfiles/config/Thunar/uca.xml ~/.config/Thunar/uca.xml
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for hexchat..."
	if installed hexchat ; then
		printf "found. Reloading configs and addons..."
		mkdir -p ~/.config/hexchat
		cp -R ~/.dotfiles/config/hexchat/* ~/.config/hexchat/
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for mpv..."
	if installed mpv ; then
		printf "found. Reloading configs..."
		mkdir -p ~/.mpv/{scripts,lua-settings}
		cp ~/.dotfiles/mpv/config ~/.mpv/config
		cp ~/.dotfiles/mpv/scripts/* ~/.mpv/config/scripts/
		cp ~/.dotfiles/mpv/lua-settings/osc.conf ~/.mpv/lua-settings/osc.conf
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for feh..."
	if installed feh ; then
		printf "found. Reloading themes, fehbg, and wallpaper..."
		mkdir -p ~/.config/feh
		cp ~/.dotfiles/config/feh/themes ~/.config/feh/themes
		cp ~/.dotfiles/fehbg ~/.fehbg
		cp ~/.dotfiles/config/feh/wallpaper ~/.config/feh/wallpaper
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for textadept..."
	if installed textadept ; then
		printf "found. Reloading configs, modules, and themes..."
		mkdir -p ~/.textadept
		cp -R ~/.dotfiles/textadept/* ~/.textadept
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for Sublime Text..."
	if installed subl ; then
		printf "found. Reloading preferences and themes..."
		cp -R ~/.dotfiles/config/sublime-text-3/* ~/.config/sublime-text-3
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for irb..."
	if installed irb ; then
		printf "found. Reloading irbrc..."
		cp ~/.dotfiles/irbrc ~/.irbrc
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for urxvt..."
	if installed urxvt ; then
		printf "found. Reloading Xdefaults..."
		cp ~/.dotfiles/Xdefaults ~/.Xdefaults
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Checking for LaTeX..."
	if installed latex ; then
		printf "found. Reloading texmf and updating the database..."
		mkdir -p ~/texmf
		cp -R ~/.dotfiles/texmf/* ~/texmf
		texhash 2> /dev/null
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "${COLOR_YLW}not installed. Skipping.${COLOR_NRM}\n"
	fi

	printf "Fetching scripts..."
	cp ~/.dotfiles/scripts/dotfiles ~/scripts/dotfiles.new
	cp ~/.dotfiles/scripts/$ ~/scripts/$
	cp ~/.dotfiles/scripts/% ~/scripts/%
	cp ~/.dotfiles/scripts/colorscheme ~/scripts/colorscheme
	cp ~/.dotfiles/scripts/colorscheme2 ~/scripts/colorscheme2
	cp ~/.dotfiles/scripts/colormake ~/scripts/colormake
	cp ~/.dotfiles/scripts/cskel ~/scripts/cskel
	cp ~/.dotfiles/scripts/jskel ~/scripts/jskel
	cp ~/.dotfiles/scripts/linecheck ~/scripts/linecheck
	cp ~/.dotfiles/scripts/pbin ~/scripts/pbin
	cp ~/.dotfiles/scripts/update ~/scripts/update
	cp ~/.dotfiles/scripts/cart ~/scripts/cart
	cp ~/.dotfiles/scripts/speedtest ~/scripts/speedtest

	if [[ "${host}" = "mercury" || "${host}" = "ianus" ]] ; then
		cp ~/.dotfiles/scripts/poomf ~/scripts/poomf
		cp ~/.dotfiles/scripts/play ~/scripts/play
		cp ~/.dotfiles/scripts/play-xclip ~/scripts/play-xclip
		cp ~/.dotfiles/scripts/xdcc ~/scripts/xdcc
	fi

	if [[ "${host}" = "athena" ]] ; then
		cp ~/.dotfiles/scripts/wwwbackup ~/scripts/wwwbackup
		cp ~/.dotfiles/scripts/dailymail.rb ~/scripts/dailymail.rb
		cp ~/.dotfiles/scripts/twitter-fortune-bot.pl ~/scripts/twitter-fortune-bot.pl
		cp ~/.dotfiles/scripts/email-fwd.rb ~/scripts/email-fwd.rb
	fi

	if [[ "${host}" = "mars" ]] ; then
		cp ~/.dotfiles/scripts/dailymail.rb ~/scripts/dailymail.rb
	fi

	if [[ "${host}" = "aphrodite" ]]; then
		cp ~/.dotfiles/scripts/dailymail.rb ~/scripts/dailymail.rb
	fi

	if [[ "${host}" = "pan" ]]; then
		cp ~/.dotfiles/scripts/music-tree ~/scripts/music-tree
		cp ~/.dotfiles/scripts/music-clean ~/scripts/music-clean
		cp ~/.dotfiles/scripts/dailymail.rb ~/scripts/dailymail.rb
	fi

	chmod +x ~/scripts/*
	printf "${COLOR_GRN}done${COLOR_NRM}.\n"

	printf "Fetching cron-shunt and crontab..."
	cp ~/.dotfiles/scripts/cron-shunt ~/scripts/cron-shunt
	if [[ -f ~/.dotfiles/crontabs/${host}.cron ]] ; then
		mkdir -p ~/scripts/cron
		cp ~/.dotfiles/crontabs/${host}.cron ~/scripts/cron/${host}.cron
		crontab -r
		crontab ~/scripts/cron/${host}.cron
		printf "${COLOR_GRN}done${COLOR_NRM}.\n"
	else
		printf "none required.\n"
	fi

	printf "Doing some cleanup..."
	[[ -f ~/scripts/haste ]] && rm ~/scripts/haste
	[[ -f ~/scripts/mpv-xclip ]] && rm ~/scripts/mpv-xclip
	printf "${COLOR_GRN}done${COLOR_NRM}.\n"

	printf "Sync dotfiles-priv? (y/N): " && read ans
	if [[ -n $ans && "${ans}" =~ [Yy] ]] ; then
		git clone https://github.com/woodruffw/dotfiles-priv ~/.dotfiles-priv 2> /dev/null
		pushd . > /dev/null
		cd ~/.dotfiles-priv
		bash ./install.sh
		popd > /dev/null
		rm -rf ~/.dotfiles-priv
	fi

	printf "${COLOR_GRN}All done${COLOR_NRM}.\n"
}

fetch_files

mv ~/scripts/dotfiles.new ~/scripts/dotfiles
