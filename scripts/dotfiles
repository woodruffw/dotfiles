#!/usr/bin/env bash

# dotfiles: fetch configuration files and scripts
# usage: dotfiles
# this file is disgusting, and will never be fixed.

function installed {
	cmd=$(command -v "${1}")

	[[ -n "${cmd}" ]] && [[ -f "${cmd}" ]]
	return ${?}
}

function running {
	pids=$(pidof "${1}")

	[[ -n "${pids}" ]]
	return ${?}
}

function green {
	echo -e "${COLOR_GRN}${*}${COLOR_NRM}"
}

function yellow {
	echo -e "${COLOR_YLW}${*}${COLOR_NRM}"
}

function die {
	echo "Error: $*" >&2
	exit 1
}

function ensure {
	"$@" \
		|| die "Failed to run '$*'. Aborting."
}

function snippet {
	dest="${2:-${1}}"
	cp ~/.snippets/"${1}"/"${1}" ~/scripts/"${dest}"
}

function dotscript {
	dest="${2:-${1}}"
	cp ~/.dotfiles/scripts/"${1}" ~/scripts/"${dest}"
}

function kbs2-contrib {
	curl --silent --output ~/scripts/"${1}" \
		https://raw.githubusercontent.com/woodruffw/kbs2/master/contrib/ext-cmds/"${1}"/"${1}"
}

function fetch-files {
	system=$(uname)
	host=$(hostname)

	if ! installed git ; then
		die "git required to fetch configs."
		exit 1
	fi

	pushd . > /dev/null

	# make sure the repos aren't clobbered
	if [[ -d ~/.dotfiles/.git ]] ; then
		ensure cd ~/.dotfiles
		ensure git fetch origin --quiet > /dev/null
		ensure git merge origin/master > /dev/null
	else
		ensure rm -rf ~/.dotfiles
		ensure git clone https://github.com/woodruffw/dotfiles ~/.dotfiles > /dev/null
	fi

	if [[ -d ~/.snippets/.git ]] ; then
		ensure cd ~/.snippets
		ensure git fetch origin --quiet > /dev/null
		ensure git merge origin/master > /dev/null
	else
		ensure rm -rf ~/.snippets
		ensure git clone https://github.com/woodruffw/snippets ~/.snippets > /dev/null
	fi

	popd > /dev/null

	mkdir -p ~/scripts

	printf "Reloading bashrc, inputrc, profile, and completions..."
	cp ~/.dotfiles/bashrc ~/.bashrc
	cp ~/.dotfiles/inputrc ~/.inputrc
	cp ~/.dotfiles/profile ~/.profile
	cp ~/.dotfiles/bash_completion ~/.bash_completion
	mkdir -p ~/.bash_completion.d
	cp -R ~/.dotfiles/bash_completion.d/* ~/.bash_completion.d
	green "done"

	# we know git is installed
	printf "Reloading git-aliases, gitignore, and gitconfig..."
	cp ~/.dotfiles/gitignore ~/.gitignore
	cp ~/.dotfiles/gitconfig ~/.gitconfig
	mkdir -p ~/.config/git
	cp -R ~/.dotfiles/config/git/* ~/.config/git
	green "done"

	# it's safe to assume pip is installed
	mkdir -p ~/.pip
	cp -R ~/.dotfiles/pip/* ~/.pip

	printf "Checking for curl..."
	if installed curl ; then
		printf "found. Reloading curlrc..."
		cp ~/.dotfiles/curlrc ~/.curlrc
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for rtorrent..."
	if installed rtorrent ; then
		printf "found. Reloading rtorrent.rc and magnet scripts..."
		if [[ -f ~/.dotfiles/rtorrent-"${host}".rc ]]; then
			cp ~/.dotfiles/rtorrent-"${host}".rc ~/.rtorrent.rc
		else
			yellow "skipping rtorrent.rc."
		fi
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for tmux..."
	if installed tmux ; then
		printf "found. Reloading tmux.conf and session files..."
		cp ~/.dotfiles/tmux.conf ~/.tmux.conf
		mkdir -p ~/.tmux
		cp ~/.dotfiles/tmux/* ~/.tmux/
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for mpv..."
	if installed mpv ; then
		printf "found. Reloading configs..."
		mkdir -p ~/.mpv/{scripts,script-opts}
		cp ~/.dotfiles/mpv/config ~/.mpv/config
		cp ~/.dotfiles/mpv/input.conf ~/.mpv/input.conf
		cp ~/.dotfiles/mpv/scripts/* ~/.mpv/scripts/
		cp ~/.dotfiles/mpv/script-opts/osc.conf ~/.mpv/script-opts/osc.conf
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for feh..."
	if installed feh ; then
		printf "found. Reloading themes, fehbg, and wallpaper..."
		mkdir -p ~/.config/feh
		cp ~/.dotfiles/config/feh/themes ~/.config/feh/themes
		cp ~/.dotfiles/fehbg ~/.fehbg
		cp ~/.dotfiles/config/feh/wallpaper ~/.config/feh/wallpaper
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for newsboat..."
	if installed newsboat ; then
		printf "found. Reloading config and scripts..."
		mkdir -p ~/.config/newsboat
		cp ~/.dotfiles/config/newsboat/config ~/.config/newsboat/config
		snippet newsboat-yt-feed
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for Sublime Text..."
	if installed subl ; then
		printf "found. Reloading preferences and themes..."
		cp -R ~/.dotfiles/config/sublime-text/* ~/.config/sublime-text
		# Annoying special case.
		cp ~/.dotfiles/config/sublime-text/Packages/User/Preferences.sublime-settings."${host}" \
			~/.config/sublime-text/Packages/User/Preferences.sublime-settings
		cp -R ~/.dotfiles/editorconfig ~/.editorconfig
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for ruby..."
	if installed ruby ; then
		printf "found. Reloading bundle config, irbrc, gemrc, and rubocop.yml..."
		mkdir -p ~/.bundle
		cp ~/.dotfiles/bundle/config ~/.bundle/config
		cp ~/.dotfiles/irbrc ~/.irbrc
		if installed rbenv; then
			cp ~/.dotfiles/gemrc.rbenv ~/.gemrc
		else
			cp ~/.dotfiles/gemrc ~/.gemrc
		fi
		cp ~/.dotfiles/rubocop.yml ~/.rubocop.yml
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for urxvt..."
	if installed urxvt ; then
		printf "found. Reloading Xresources and extensions..."
		cp ~/.dotfiles/Xresources."${host}" ~/.Xresources
		mkdir -p ~/.urxvt/ext
		cp -R ~/.dotfiles/urxvt/ext/* ~/.urxvt/ext
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for alacritty..."
	if installed alacritty ; then
		printf "found. Reloading config..."
		mkdir -p ~/.config/alacritty
		cp -R ~/.dotfiles/config/alacritty/* ~/.config/alacritty
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for LaTeX..."
	if installed latex ; then
		printf "found. Reloading texmf and updating the database..."
		mkdir -p ~/texmf
		cp -R ~/.dotfiles/texmf/* ~/texmf
		installed texhash && texhash > /dev/null 2>&1
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for Firefox..."
	if installed firefox && ! running firefox ; then
		printf "found. Reloading netflix, jellyfin, pipefox and ff2mpv..."
		dotscript netflix
		dotscript jellyfin
		dotscript pipefox
		dotscript ff2mpv
		mkdir -p ~/.mozilla/native-messaging-hosts/
		cp ~/.dotfiles/mozilla/native-messaging-hosts/ff2mpv.json ~/.mozilla/native-messaging-hosts
		green "done"
	elif running firefox ; then
		# Recent versions of Firefox lock up when native manifests are updated (even if not
		# actually changed) while running.
		yellow "not reloading while Firefox is running. Skipping"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for i3..."
	if installed i3 ; then
		printf "found. Reloading config and scripts..."
		cp ~/.dotfiles/config/i3/config-"${host}" ~/.config/i3/config
		cp ~/.dotfiles/i3status-"${host}".conf ~/.i3status.conf
		cp ~/.dotfiles/config/i3/statusbar ~/.config/i3/statusbar
		dotscript monitors-"${host}" monitors

		if [[ -f ~/.dotfiles/scripts/workspaces-"${host}" ]]; then
			dotscript workspaces-"${host}" workspaces

			mkdir -p ~/.config/i3/workspaces

			if [[ "${host}" = "mercury" ]]; then
				for ws in com dev www; do
					cp ~/.dotfiles/config/i3/workspaces/"${ws}".json ~/.config/i3/workspaces
				done
			elif [[ "${host}" = "janus" ]]; then
				for ws in 1A 1B 2A; do
					cp ~/.dotfiles/config/i3/workspaces/"${ws}".json ~/.config/i3/workspaces
				done
			fi
		fi
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for kbs2..."
	if installed kbs2 ; then
		printf "found. Reloading config and scripts..."
		cp -R ~/.dotfiles/config/kbs2/* ~/.config/kbs2
		kbs2-contrib kbs2-yad-login
		kbs2-contrib kbs2-dmenu-pass
		kbs2-contrib kbs2-qr
		kbs2-contrib kbs2-snip
		kbs2-contrib kbs2-audit-pass
		kbs2-contrib kbs2-ssh-add
		kbs2-contrib kbs2-gpg-add
		kbs2-contrib kbs2-git-ssh-signing
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for fontconfig..."
	if installed fc-cache; then
		printf "found. Reloading fonts.conf..."
		mkdir -p ~/.config/fontconfig
		cp ~/.dotfiles/config/fontconfig/fonts.conf ~/.config/fontconfig/fonts.conf
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for yt-dlp..."
	if installed yt-dlp; then
		printf "found. Reloading config..."
		dotscript youtube-dl
		mkdir -p ~/.config/yt-dlp
		cp ~/.dotfiles/config/yt-dlp/config ~/.config/yt-dlp/config
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for neomutt..."
	if installed neomutt; then
		printf "found. Reloading config..."
		cp ~/.dotfiles/muttrc ~/.muttrc
		mkdir -p ~/.mutt
		cp -R ~/.dotfiles/mutt/* ~/.mutt
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for gpg2..."
	if installed gpg2; then
		printf "found. Reloading config..."
		cp -R ~/.dotfiles/gnupg/* ~/.gnupg
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for gdb..."
	if installed gdb; then
		printf "found. Reloading config..."
		cp ~/.dotfiles/gdbinit ~/.gdbinit
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for Rust..."
	if installed rustc; then
		printf "found. Reloading configs..."
		mkdir -p ~/.cargo
		cp ~/.dotfiles/cargo/config ~/.cargo/config
		cp ~/.dotfiles/rustfmt.toml ~/.rustfmt.toml
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for dunst..."
	if installed dunst; then
		printf "found. Reloading config..."
		mkdir -p ~/.config/dunst/
		cp ~/.dotfiles/config/dunst/dunstrc."${host}" ~/.config/dunst/dunstrc
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for shellcheck..."
	if installed shellcheck; then
		printf "found. Reloading config..."
		cp ~/.dotfiles/shellcheckrc ~/.shellcheckrc
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for rofi..."
	if installed rofi; then
		printf "found. Reloading config..."
		mkdir -p ~/.config/rofi
		cp ~/.dotfiles/config/rofi/config.rasi."${host}" ~/.config/rofi
		green "done"
	else
		yellow "not installed. Skipping"
	fi

	printf "Checking for systemd..."
	if installed systemd; then
		printf "found. Reloading user services..."
		mkdir -p ~/.config/systemd/user
		cp -R ~/.dotfiles/config/systemd/user/* ~/.config/systemd/user
		green "done"
	else
		yellow "not installed. Skipping"
	fi


	printf "Fetching scripts..."
	dotscript dotfiles dotfiles.new
	dotscript update
	dotscript worldtimes
	dotscript selecta
	dotscript update-hosts
	dotscript license
	dotscript bak
	dotscript nth
	dotscript termck

	snippet fftitle
	snippet fftimelapse
	snippet ffnicegif
	snippet ffcat
	snippet ffflagflip
	snippet ffwatermark
	snippet ffautocrop
	snippet ffclip
	snippet ffpreclip
	snippet ffpostclip
	snippet ffpip
	snippet ffmono
	snippet ffreverse
	snippet ffmonochrome
	snippet ffboxblur
	snippet ffgolapse
	snippet ffdeshake
	snippet ffstill
	snippet ffdialtone
	snippet ffsbs
	snippet fffaceblur
	snippet ffdtmf
	snippet ffspectrum
	snippet ffaudiovis
	snippet ffnegate
	snippet ffmirror
	snippet ffspin
	snippet ffsubshot
	snippet ffframes
	snippet urlgrep
	snippet albumart
	snippet rip
	snippet flac2mp3
	snippet mp3art
	snippet flacart
	snippet uspatent
	snippet gif-length-groups
	snippet giphy-fetch
	snippet ffmpeg-mosaic
	snippet normalize-gifs
	snippet rubyvm-dump
	snippet git-gem-release-tag
	snippet git-shard-release-tag
	snippet git-fetch-pr
	snippet git-lint-commit
	snippet git-move-commits
	snippet git-open-all
	snippet git-takeout
	snippet git-unws
	snippet git-dwtb
	snippet ronnpp
	snippet linecheck
	snippet imgresize
	snippet ssqdb
	snippet reorient
	snippet partyhard
	snippet ffmpeg-srt-scene
	snippet docker-shellin
	snippet quotecard
	snippet mupdf-prompt

	if [[ "${system}" = "Darwin" ]]; then
		cp ~/.dotfiles/scripts/osx-vnc-password ~/scripts/osx-vnc-password
		cp ~/.dotfiles/scripts/darktoggle ~/scripts/darktoggle
	fi

	# Wrappers with various HiDPI fixes.
	if [[ "${host}" = "janus" ]]; then
		dotscript obs
		dotscript twitch
	fi

	if [[ "${host}" = "mercury" || "${host}" = "janus" ]] ; then
		dotscript poomf
		dotscript play-xclip
		dotscript byzanz-rect
		dotscript ezsshfs
		dotscript open-pdf
		dotscript nft
		dotscript google
		dotscript ytsearch
		dotscript ytsearch2
		dotscript slopcast
		dotscript ghbrowse
		dotscript screenlock
		dotscript latin
		dotscript bootlin
		dotscript geocode
		dotscript geoopen
		dotscript gimme-file
		dotscript mumble-insecure
		dotscript ripcord

		snippet play
		snippet vboxssh
		snippet xontop
		snippet tal

		mkdir -p ~/.local/share/file-manager/actions/
		cp ~/.dotfiles/local/share/file-manager/actions/*.desktop ~/.local/share/file-manager/actions/

		# MIME application associations.
		cp ~/.dotfiles/config/mimeapps.list ~/.config/mimeapps.list
	fi

	if [[ "${host}" = "athena" ]] ; then
		dotscript wwwbackup

		snippet vbnla
	fi

	chmod +x ~/scripts/*
	green "done"

	printf "Doing some cleanup..."
	rm -f ~/scripts/pid2xid
	rm -f ~/scripts/bug-roommates
	rm -f ~/scripts/mp4flip
	rm -f ~/scripts/forecast
	rm -f ~/scripts/remind
	rm -f ~/scripts/kbsecret-yad-login
	rm -f ~/scripts/kbsecret-dmenu-pass
	rm -f ~/scripts/kbsecret-snip
	rm -f ~/scripts/kbsecret-todo-list
	rm -f ~/scripts/kbsecret-discover-sessions
	rm -f ~/scripts/kbsecret-recovery
	rm -f ~/scripts/kbsecret-audit-pass
	rm -f ~/scripts/kbsecret-zxcvbn
	rm -f ~/scripts/kbsecret-qr
	rm -f ~/scripts/todo
	rm -f ~/scripts/snip
	rm -f ~/scripts/radio
	rm -f ~/scripts/uzbl-xclip
	rm -f ~/scripts/subreddit-watch
	rm -f ~/scripts/cart
	rm -f ~/scripts/speedtest
	rm -f ~/scripts/ffox
	rm -f ~/scripts/spotify
	rm -f ~/scripts/sp
	rm -f ~/scripts/music
	rm -f ~/scripts/plex
	rm -f ~/scripts/colormake
	rm -f ~/scripts/psh
	rm -f ~/scripts/fwuf
	rm -f ~/scripts/aaa
	rm -f ~/scripts/brewnav
	rm -f ~/scripts/pbin
	rm -f ~/scripts/diff-highlight
	rm -f ~/scripts/xyzradio

	rm -rf ~/.newsbeuter
	rm -rf ~/.mpv/lua-settings/
	rm -rf ~/.config/newsbeuter
	green "done"

	printf "Sync dotfiles-priv? (y/N): " && read -r ans
	if [[ -n $ans && "${ans}" =~ [Yy] ]] ; then
		ensure git clone git@github.com:woodruffw/dotfiles-priv.git ~/.dotfiles-priv 2> /dev/null
		pushd . > /dev/null
		ensure cd ~/.dotfiles-priv
		ensure bash ./install.sh
		popd > /dev/null
		ensure rm -rf ~/.dotfiles-priv
	fi

	green "All done"
}

function rebuild-completions {
	printf "Rebuilding completion scripts..."
	# kbs2
	installed kbs2 && kbs2 --completions bash > ~/.bash_completion.d/kbs2.bash

	# pyenv
	installed pyenv && \
		pyenv init - > ~/.bash_completion.d/pyenv.bash && \
		pyenv virtualenv-init - >> ~/.bash_completion.d/pyenv.bash

	# rbenv
	installed rbenv && rbenv init - > ~/.bash_completion.d/rbenv.bash

	# pip
	installed pip && pip completion --bash > ~/.bash_completion.d/pip.bash

	# pipx
	installed pipx && register-python-argcomplete pipx > ~/.bash_completion.d/pipx.bash

	# rustup & cargo
	installed rustup && \
		rustup completions bash rustup > ~/.bash_completion.d/rustup.bash && \
		rustup completions bash cargo > ~/.bash_completion.d/cargo.bash

	green "done"
}

fetch-files
rebuild-completions

mv ~/scripts/dotfiles.new ~/scripts/dotfiles
