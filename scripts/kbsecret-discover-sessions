#!/usr/bin/env ruby
# frozen_string_literal: true

# kbsecret-discover-sessions: Scan for unconfigured KBSecret sessions and prompt the user
# to label them.

require "keybase"
require "kbsecret"
require "tty-prompt"

include KBSecret

cmd = CLI.create do |c|
  c.slop do |o|
    o.banner = <<~EOS
      Usage:
        kbsecret discover-sessions
    EOS

    o.bool "-d", "--dry-run", "output discovered sessions without attempting to configure them"
    o.bool "-a", "--auto-name", "auto-name the discovered session(s) when possible"
  end
end

session_paths = Config.session_labels.map { |l| Session.new label: l }.map(&:path)
pattern       = File.join(Keybase::Configuration::KBFS_MOUNT, "private",
                          "*", "kbsecret", "*")
candidates    = Dir[pattern].select { |d| Dir.exist?(d) } - session_paths
prompt        = TTY::Prompt.new

cmd.bye "No unconfigured sessions." if candidates.empty?

cmd.info "Found #{candidates.size} unconfigured session(s)..."

candidates.each do |candidate|
  if cmd.opts.dry_run?
    puts candidate
    next
  end

  root = File.basename candidate
  users = candidate.split("/")[3].split(",")

  next unless prompt.yes?("Configure #{root} (#{users.join(", ")})?")

  if cmd.opts.auto_name? && !Config.session?(root)
    cmd.info "Auto-naming session with unique root directory: '#{root}'..."
    Config.configure_session(root, users: users, root: root)
  else
    label = prompt.ask("Session label?") do |q|
      q.validate ->(input) { input && !Config.session?(input) && input =~ /([\w\d]+(-[\w\d]+)*)/ }
      q.messages[:valid?] = "Invalid session label (bad format or already taken)"
    end

    Config.configure_session(label, users: users, root: root)
  end
end
